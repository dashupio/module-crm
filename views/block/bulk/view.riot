<block-bulk-view>
  <div class={ `flex-1 d-flex flex-column h-100 w-100${props.block.background ? '' : ' card'}` }>
    <div if={ props.block.name } class={ props.block.background ? ' mb-2' : 'card-header' }>
      <b>{ props.block.name }</b>
    </div>
    <div class={ `flex-column oy-scroll ${props.block.background ? ' flex-1' : ' card-body'}` }>
      <div if={ getEmail().length } class="mb-3">
        <label class="form-label">
          Email From
        </label>
        <eden-select ref={ ref('from') } placeholder="Select Email" data={ getEmail() } on-change={ (e) => onChange(e) } />
      </div>
      <div class="mb-3">
        <label class="form-label">
          Email Subject
        </label>
        <input class="form-control" placeholder="Subject" ref="subject" onchange={ (e) => onChange(e) } />
      </div>
      <div class="">
        <label class="form-label d-flex align-items-center">
          Email Body
          <button class="btn btn-sm btn-primary ml-auto" onclick={ (e) => update({ code : !state.code }) }>
            { state.code ? 'Use WYSIWYG' : 'Use HTML' }
          </button>
        </label>
        <editor if={ !state.code } name="email" show-toolbar={ true } ref={ ref('body') } placeholder="Content" on-change={ (e) => onChange(e) } />
        <code-block if={ state.code } mode="handlebars" name="email" ref={ ref('body') } placeholder="Content" on-change={ (e) => onChange(e) } />
      </div>
    </div>
    <div class={ `${props.block.background ? ' mt-2' : ' card-footer'}` }>
      <button class={ `btn btn-success${!loading('email') && getEmail().length && props.from && props.subject && props.body ? '' : ' disabled'}` } onclick={ (e) => onConfirm(e) }>
        { loading('email') ? 'Sending...' : 'Send' }
      </button>
    </div>
  </div>

  <!-- MODAL -->
  <div if={ state.modal } class="modal fade" data-backdrop="static">
    <div class="modal-dialog">
      <div class="modal-content">

        <!-- Modal Header -->
        <div class="modal-header">
          <h5 class="modal-title">
            Confirm Campaign
          </h5>
          <button type="button" class="btn-close" data-dismiss="modal">&times;</button>
        </div>

        <!-- Modal body -->
        <div if={ !state.success } class="modal-body">
          You're about to send <b if={ state.count }>{ state.count.toLocaleString() }</b> emails.<br />
          Please check all of the details are correct before confirming.
        </div>

        <!-- Modal body -->
        <div if={ state.success } class="modal-body">
          Successfully scheduled send to <b if={ state.success }>{ state.success.toLocaleString() }</b> emails.<br />
        </div>

        <!-- Modal footer -->
        <div class="modal-footer">
          <button type="button" class="btn btn-info mr-auto" data-dismiss="modal">
            Close
          </button>
          <button if={ !state.success } type="button" class={ `btn btn-success${loading('email') ? ' disabled' : ''}` } onclick={ (e) => onEmail(e) }>
            { loading('email') ? 'Submitting...' : 'Confirm' }
          </button>
        </div>

      </div>
    </div>
  </div>
  <!-- / MODAL -->

  <script>
    // dot prop
    import dotProp from 'dot-prop';
    import PerfectScrollbar from 'perfect-scrollbar';

    // export default
    export default class BlockBulkView {

      /**
       * on before mount
       */
      onBeforeMount() {
        
      }

      /**
       * on mounted
       */
      onMounted() {
        // check frontend
        if (typeof window === 'undefined') return;
        
        // fix column sizing
        if (this.$('.oy-scroll') && !this.$('.oy-scroll.ps')) {
          // ps
          this.ps = new PerfectScrollbar(this.$('.oy-scroll'), {
            suppressScrollX : true,
          });
        }
      }

      /**
       * on change timing
       *
       * @param {Event} e
       */
      onChange(e) {
        // set element
        this.props.props({
          from    : this.refs.from.val(),
          body    : this.refs.body.val(),
          subject : this.$('[ref="subject"]').value,
        });
      }

      /**
       * get email data
       */
      getEmail() {
        // return emails
        return [...(this.props.page.get('connects') || [])].filter((e) => e.email).map((connect) => {
          return {
            text  : connect.email,
            value : connect.uuid,
          }
        });
      }

      /**
       * on confirm
       */
      async onConfirm(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // update show modal
        this.update({
          count   : this.props.items && this.props.items.length || await this.getQuery().count(),
          modal   : true,
          success : null,
        });
        $(this.$('.modal')).modal('show').one('bs.modal.hidden', () => {
          // modal false
          this.update({
            modal : false,
          });
        });
      }
      
      /**
       * on send
       */
      async onEmail(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // data
        const data = {
          from    : this.refs.from.val(),
          body    : this.refs.body.val(),
          subject : this.$('[ref="subject"]').value,
        };

        // check data
        if (!data.from) return;
        if (!data.body) return;
        if (!data.subject) return;

        // get connect
        const connect = this.props.page.get('connects').find((c) => c.uuid === data.from);

        // loading
        this.loading('email', true);
        
        // submit form
        const { count } = await this.props.dashup.action({
          type   : 'action',
          user   : this.props.me.get('_id'),
          page   : this.props.page.get('_id'),
          form   : this.getSelectedForms()[0],
          model  : this.getSelectedModel(),
          struct : 'email',
        }, 'bulk', connect, {
          ...data,

          user  : this.props.dashup.get('_meta.member'),
          query : this.getQuery().query,
        });

        // update
        this.update({
          success : count,
        });

        // loading
        this.loading('email', false);
      }

      /**
       * get selected model
       */
      getSelectedModel() {
        // check model
        return this.props.block.model || this.props.model;
      }

      /**
       * get selected forms
       */
      getSelectedForms() {
        // forms
        let forms = this.props.block.forms || [];

        // check form
        if (!forms.length && this.props.form) forms = [this.props.form];
        if (!forms.length && this.props.forms) forms = this.props.forms;

        // return forms
        return forms;
      }

      /**
       * get fields
       */
      getFields() {
        // get forms
        const forms = this.getSelectedForms();

        // return fields
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'form' && forms.includes(page.get('_id'));
        }).reduce((accum, page) => {
          // fields
          accum.push(...(page.get('data.fields') || []));
          
          // return accum
          return accum;
        }, []);
      }

      /**
       * get query
       */
      getQuery() {
        // set query
        let query = this.props.dashup.page(this.getSelectedModel());

        // check selected
        if (this.props.items && this.props.items.length) {
          // selected
          return query.findByIds(this.props.items.map((s) => s.get('_id')));
        }

        // forms
        const forms = this.getSelectedForms();
        const fields = this.getFields();

        // check items
        if (forms.length) {
          // loop forms
          query = query.in('_meta.form', forms);
        }

        // load filter
        let filter = [];

        // check page filter
        if (this.props.page.get('data.model') === this.getSelectedModel()) {
          // try/catch
          try {
            filter.push(...(JSON.parse(this.props.page.get('data.filter'))));
          } catch (e) {}
        }
        
        // try/catch
        try {
          filter.push(...(JSON.parse(this.props.block.filter)));
        } catch (e) {}

        // add initial where
        if (filter) {
          // add wheres
          filter.forEach((where) => {
            // where
            query = query.where(where);
          });
        }

        // search
        if (this.props.search && this.props.search.length) {
          // add search
          query = query.search(this.props.search);
        }

        // test by user
        if ((this.props.page.get('user.filter') || {}).me) {
          // get user fields
          const userFields = [...(fields || [])].filter((f) => (this.props.page.get('data.user') || []).includes(f.uuid));
          
          // loop fields
          query = query[userFields.length > 1 ? 'or' : 'where'](...(userFields.map((userField) => {
            // return or
            return {
              [userField.name || userField.uuid] : this.props.dashup.get('_meta.member'),
            };
          })));
        }

        // user query
        (this.props.page.get('user.where') || []).forEach((where) => {
          // types
          const numberTypes = ['gt', 'lt', 'gte', 'lte'];

          // add query
          query = query[where[0]](where[1], numberTypes.includes(where[0]) ? parseFloat(where[2]) : where[2]);
        });

        // check vals
        const tagFields = [...(fields || [])].filter((f) => (this.props.page.get('data.tag') || []).includes(f.uuid));

        // get tags
        const userTags = (this.props.page.get('user.filter.tags') || []).filter((id) => {
          // return find
          return tagFields.find((t) => {
            // check id
            return (t.options || []).find((o) => o.value === id);
          });
        });

        // get filter tags
        if (userTags.length) {
          // loop fields
          query = query[tagFields.length > 1 ? 'or' : 'where'](...(tagFields.map((tagField) => {
            // return or
            return {
              [tagField.name || tagField.uuid] : userTags,
            };
          })));
        }

        // check sort
        if (this.props.page.get('data.sort.id')) {
          // get field
          const sortField = this.props.page.get('data.sort.sort') ? {
            name : this.props.page.get('data.sort.sort'),
          } : fields.find((f) => f.uuid === this.props.page.get('data.sort.id'));

          // sort by that
          if (sortField) query = query.sort(sortField.name || sortField.uuid, this.props.page.get('data.sort.way'));
        }
 
        // return query
        return query;
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</block-bulk-view>