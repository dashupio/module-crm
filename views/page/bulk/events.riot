<page-bulk-events>
  <div>
    <div class="mb-3">
      <label class="form-label">
        Event Model
      </label>
      <eden-select on-change={ (e, val) => onModel(val) } ref={ ref('model') } placeholder="Select Model" data={ getModel() } />
    </div>
    <div if={ !loading('model') && props.page.get('data.event.model') } class="mb-3">
      <label class="form-label">
        Event Form
      </label>
      <eden-select on-change={ (e, val) => onForm(val) } ref={ ref('form') } placeholder="Select Form" data={ getForm() } />
    </div>
    <div if={ !loading('model') && !loading('form') && props.page.get('data.event.form') }>
      <hr />
      
      <div class="mb-3" each={ (field, i) in fields }>
        <label class="form-label">
          { field.label } Field
        </label>
        <eden-select on-change={ (e, value) => onField(field.name, value) } ref={ ref(field.name) } placeholder={ `Select ${field.label}` } data={ getField(field.name, field.type) } />
        <small if={ field.help }>
          { field.help }
        </small>
      </div>
    </div>
  </div>

  <script>
    // export default
    export default class PagePhoneEvents {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       */
      onBeforeMount() {
        // bind methods
        this.onModel = this.onModel.bind(this);

        // get fields
        this.getFields = this.getFields.bind(this);

        // set fields
        this.fields = [
          {
            name  : 'item',
            type  : 'model',
            help  : 'Model field referencing the contact',
            label : 'Task',
          },
          {
            name  : 'to',
            type  : 'email',
            help  : 'Email field for to',
            label : 'Email To',
          },
          {
            name  : 'from',
            type  : 'email',
            help  : 'Email field for from',
            label : 'Email From',
          },
          {
            name  : 'title',
            type  : 'text',
            help  : 'Text field for the event title',
            label : 'Title'
          },
          {
            name  : 'type',
            type  : 'text',
            help  : 'Text field for the event type',
            label : 'Type'
          },
          {
            name  : 'body',
            type  : 'textarea',
            help  : 'Textarea field for the event content/body',
            label : 'Body',
          },
          {
            name  : 'user',
            type  : 'user',
            help  : 'User field for the sending user',
            label : 'User',
          },
          {
            name  : 'opened',
            type  : 'date',
            help  : 'First opened date',
            label : 'First Opened',
          },
          {
            name  : 'opens',
            type  : 'number',
            help  : 'Amount of times the user opens this email',
            label : 'Opens',
          }
        ];
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // EVENT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on model
       */
      async onModel(val) {
        // get value
        if (!val) val = this.refs.model.val();

        // loading model
        this.loading('model', true);
        
        // set model
        await this.props.data('event.model', val);

        // loading model
        this.loading('model', false);
      }

      /**
       * on model
       */
      async onForm(val) {
        // get value
        if (!val) val = this.refs.form.val();

        // loading model
        this.loading('form', true);
        
        // set model
        await this.props.data('event.form', val);

        // loading model
        this.loading('form', false);
      }

      /**
       * on model
       */
      async onField(type, val) {
        // get value
        if (!val) val = this.refs[type].val();

        // field
        const data = this.props.page.get('data.event') || {};

        // set data
        data[type] = val;
        
        // set model
        this.props.data('event', data);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // GET METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * get value
       */
      getModel() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'model';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.page.get('data.event.model') === page.get('_id'),
          };
        });
      }

      /**
       * get value
       */
      getForm() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'form' && page.get('data.model') === this.props.page.get('data.event.model');
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.page.get('data.event.form') === page.get('_id'),
          };
        });
      }

      /**
       * get field
       */
      getField(name, type) {
        // return value
        return [...(this.getFields())].filter((f) => {
          // return type
          return type.includes(f.type);
        }).map((field) => {
          // return fields
          return {
            name     : field.label || field.name,
            value    : field.uuid,
            selected : this.props.page.get(`data.event.${name}`) === field.uuid,
          };
        });
      }

      /**
       * get fields
       */
      getFields() {
        // reduce
        return [this.props.page.get('data.event.form')].filter((i) => i).reduce((accum, id) => {
          // get page
          const page = this.props.dashup.page(id);

          // check page
          if (!page || !page.get('data.fields')) return accum;

          // loop fields
          accum.push(...page.get('data.fields').map((f) => {
            // return field
            return {
              ...f,

              form : page.get('_id'),
            };
          }));

          // return accum
          return accum;
        }, []);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-bulk-events>