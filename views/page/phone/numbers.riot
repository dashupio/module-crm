<page-phone-numbers>
  <div>
    <div if={ state.tab !== 'buy' && loading() } class="my-4 text-center">
      <i class="h1 fa fa-spinner fa-spin" />
    </div>

    <div if={ state.tab === 'purchase' }>
      <div if={ state.number && !state.order }>
        <p class="lead my-5 text-center">
          Purchasing <b>{ state.number.friendlyName }</b>
        </p>
        <div id="checkout" />
      </div>
    </div>
    <div if={ state.tab === 'number' }>
      <div if={ state.order }>
        <p class="lead my-5 text-center">
          <b>{ state.order.get('number') }</b>
        </p>
        <div id="order" />
      </div>
    </div>
    
    <div if={ state.tab === 'buy' }>
      <div if={ state.error } class="alert alert-danger mb-3">
        Error: { state.error }
      </div>
      <div class="mb-3">
        <label class="form-label">
          Select Country
        </label>
        <div class="d-flex flex-row">
          <div class="flex-1">
            <eden-select on-change={ (e, val) => onCountry(val) } placeholder="Select Country" data={ getCountry() } />
          </div>
          <button class="btn btn-info ml-2" onclick={ (e) => onTab(e, 'list') }>
            Back
          </button>
        </div>
      </div>
      <div if={ loading() } class="my-4 text-center">
        <i class="h1 fa fa-spinner fa-spin" />
      </div>
      <div if={ !loading('numbers') && state.numbers }>
        <div class="card mb-2" each={ (number, i) in state.numbers }>
          <div class="card-body d-flex align-items-center">
            <button class="btn mr-3 btn-primary">
              { number.region || number.isoCountry }
            </button>

            <div>
              <b class="d-block">
                { number.phoneNumber }
              </b>
              <small>
                { number.locality } { number.friendlyName }
              </small>
            </div>

            <div class="ml-auto">
              <button class="mr-2 btn btn-link" if={ number.capabilities.SMS } title="SMS enabled" data-toggle="tooltip">
                <i class="fa fa-sms mr-2" />
                $0.02 /sms
              </button>
              <button class="mr-2 btn btn-link" if={ number.capabilities.voice } title="Voice enabled" data-toggle="tooltip">
                <i class="fa fa-phone mr-2" />
                $0.02 /min
              </button>
            </div>

            <button class="btn ml-3 mr-0 btn-success" onclick={ (e) => onPurchase(e, number) }>
              <i class="fa fa-shopping-cart mr-2" />
              $9.99 /m
            </button>
          </div>
        </div>
      </div>
    </div>
    <div if={ !state.tab || state.tab === 'list' }>
      <label class="form-label">
        Your Numbers
      </label>

      <div>
        <button class="btn btn-success" onclick={ (e) => onTab(e, 'buy') }>
          Purchase Number
        </button>
      </div>
    </div>
  </div>

  <script>
    // import countries
    import countries from 'country-list';

    // export default
    export default class PagePhoneNumbers {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       */
      onBeforeMount() {
        
      }

      /**
       * on before mount
       */
      async onUpdated() {
        // check state
        if (this.state.tab !== 'number') {
          // order loading
          this.orderLoading = false;
        } else if (!this.orderLoading && !this.loading() && this.state.order) {
          // set loading
          this.orderLoading = true;
            
          // do checkout
          this.order = await eden.guest.page('5fa8f18e5cc2fcc84ff61ebb').view('#order', 'order', {
            logo  : '/public/assets/images/logo-color.svg',
            back  : `/app/${this.props.page.get('_id')}`,
            order : this.state.order.get('_id'),
          });
        }
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // EVENT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on tab
       */
      onTab(e, tab) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // update
        this.update({
          tab,
          error : null,
        });
      }

      /**
       * on number
       */
      async onPurchase(e, number) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // update
        this.update({
          tab : 'purchase',
          number,
        });
        this.loading('checkout', true);

        // load guest dashup
        if (this.props && this.props.guest && !eden.guest) {
          // set guest dashup
          eden.guest = new Dashup(this.props.guest);
        }

        // await building
        await eden.guest.building;

        // load plan
        const actualNumber = await eden.guest.page('5fa8d64fce9ecf0d7bfa4327').where({
          sku : 'number',
        }).findOne();

        // add
        await eden.guest.page('5fa8f18e5cc2fcc84ff61ebb').remove(actualNumber);
        await eden.guest.page('5fa8f18e5cc2fcc84ff61ebb').add(actualNumber, 1, {
          page   : this.props.page.get('_id'),
          dashup : this.props.dashup.get('_id'),
          number : this.state.number,
        });

        // building
        this.loading('checkout', false);

        // do checkout
        this.checkout = await eden.guest.page('5fa8f18e5cc2fcc84ff61ebb').view('#checkout', 'checkout', {
          logo    : '/public/assets/images/logo-color.svg',
          back    : `/app/${this.props.page.get('_id')}`,
          email   : eden.user.get('email'),
          classes : {
            checkoutLogo            : 'd-none',
            checkoutMain            : 'dashup-checkout-main col-12 order-1 mt-5',
            checkoutSteps           : 'd-none',
            checkoutSidebar         : 'dashup-checkout-cart col-12',
            checkoutCompleteBtn     : 'btn btn-dark',
            checkoutCompleteBack    : 'd-none',
            checkoutCompleteBtnWrap : 'col-12 text-right',
          },
          onSuccess : async (order) => {
            // load order
            this.update({
              tab : 'number',
            });
            this.loading('order', true);

            // send number
            const data = await this.props.page.action('purchase', order.get('_id'));

            // error
            if (!data.success) {
              // update
              this.update({
                tab   : 'buy',
                error : data.message,
              });

              // false
              return this.loading('order', false);
            }

            // loop data
            Object.keys(data.result).forEach((key) => {
              // set value
              order.set(key, data.result[key]);
            });

            // update
            this.update({
              order,
            });

            // order false
            this.loading('order', false);
            this.props.page.emit('numbers', true);
          },
        });
      }
      
      /**
       * on country
       */
      onCountry(val) {
        // update country
        this.update({
          country : val,
        });

        // load list
        this.load(val);
      }

      // ////////////////////////////////////////////////////////////////////////////
      //
      // GET METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////
      
      /**
       * get country
       */
      getCountry() {
        // loop
        return countries.getCodes().map((code) => {
          // return fields
          return {
            name     : countries.getName(code),
            value    : code,
            selected : this.state.country === code,
          };
        });
      }

      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * load numbers
       */
      async load(code) {
        // loading
        this.loading('numbers', true);

        // load from page
        const numbers = await this.props.page.action('numbers', code);

        // update
        this.update({
          numbers,
        });

        // loading
        this.loading('numbers', false);
      }

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-phone-numbers>