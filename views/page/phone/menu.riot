<page-phone-menu>
  <div>
    <!-- NUMBERS -->
    <button if={ connection && connection.number && !connection.call } class="btn btn-link mr-2" data-toggle="tooltip" title="Calling Number">
      { connection.number }
    </button>
    <div if={ state.numbers && state.numbers.length > 1 && (!connection || !connection.call) } class="btn-group dropdown mr-2" data-toggle="tooltip" title="Calling Number">
      <button class={ `btn btn-${connection && connection.number ? 'light' : 'info'}` } id="dropdown-number" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        { connection && connection.number || 'Select Number' }
      </button>
      <div class="dropdown-menu" aria-labelledby="dropdown-number">
        <button each={ (item, i) in state.numbers } class="dropdown-item" onclick={ (e) => onNumber(e, item.number) }>
          { item.number.number }
        </button>
      </div>
    </div>
    <!-- / NUMBERS -->

    <!-- STATUS -->
    <button if={ connection && connection.number && !connection.call } class={ `btn mr-2 btn-${status[connection.status || 'connecting']}` } data-toggle="tooltip" title="Connection Status">
      <i class="fa fa-plug mr-2" />
      { ucfirst(connection.status || 'connecting') }
    </button>
    <button if={ connection && connection.call } class="btn btn-link mr-2" data-toggle="tooltip" title="Call Time">
      { new Date((new Date().getTime() - connection.call.start.getTime())).toISOString().substr(11, 8) }
    </button>
    <div if={ connection && connection.call } class="btn-group mr-1" data-toggle="tooltip" title="Call Status">
      <button class={ `btn btn-${status[connection.call.status || 'connecting']}` }>
        { ucfirst(connection.call.status) }
      </button>
    </div>
    <!-- / STATUS -->

    <!-- INCOMING -->
    <div if={ connection && connection.call && connection.call.type === 'incoming' && !connection.call.answered } class="btn-group mr-1">
      <button class="btn btn-success mr-2" onclick={ (e) => onStart(e) } data-toggle="tooltip" title="Accept Incoming Call">
        <i class={ `fa fa-phone mr-2` } />
        Accept
      </button>
      <button class="btn btn-danger mr-2" onclick={ (e) => onEnd(e) } data-toggle="tooltip" title="Reject Incoming Call">
        <i class={ `fa fa-times mr-2` } />
        Reject
      </button>
    </div>
    <!-- / INCOMING -->

    <!-- CALL METHODS -->
    <div if={ connection && connection.call && (connection.call.type !== 'incoming' || connection.call.answered) } class="btn-group mr-1">
      <button class={ `btn btn-${connection.call.muted ? 'danger' : 'success'}` } onclick={ (e) => onMute(e) } data-toggle="tooltip" title="Mute Call">
        <i class={ `fa fa-${connection.call.muted ? 'volume-mute' : 'volume'}` } />
      </button>
      <button class="btn btn-danger" onclick={ (e) => onEnd(e) } data-toggle="tooltip" title="End Call">
        <i class={ `fa fa-times` } />
      </button>
    </div>
    <!-- / CALL METHODS -->

    <!-- POWER DIALLER -->
    <div if={ connection } class="btn-group mr-2">
      <button if={ !connection.dialer } class="btn btn-primary" onclick={ (e) => onDialer(e) } data-toggle="tooltip" title="Start Dialer">
        Start Dialer
      </button>
      <button if={ connection.dialer } class="btn btn-primary" data-toggle="tooltip" title="Dialer Status">
        { ucfirst(connection.dialer.status) } - 
        { connection.dialer.dialled.length } of { connection.count }
      </button>
      <button if={ connection.dialer && connection.dialer.status === 'dialing' } class="btn btn-info" onclick={ (e) => onNext(e) } data-toggle="tooltip" title="Next Call">
        <i class="fa fa-forward" />
      </button>
      <button if={ connection.dialer && connection.dialer.status === 'dialing' } class="btn btn-danger" onclick={ (e) => onPause(e) } data-toggle="tooltip" title="Pause Dialer">
        <i class="fa fa-pause" />
      </button>
      <button if={ connection.dialer && connection.dialer.status === 'paused' } class="btn btn-success" onclick={ (e) => onPlay(e) } data-toggle="tooltip" title="Start Dialer">
        <i class="fa fa-play" />
      </button>
      <button if={ connection.dialer && connection.dialer.status === 'paused' } class="btn btn-danger" onclick={ (e) => onFinish(e) } data-toggle="tooltip" title="End Dialer">
        <i class="fa fa-times" />
      </button>
      <button if={ connection.dialer && connection.dialer.status === 'finished' } class="btn btn-danger" onclick={ (e) => onFinish(e) } data-toggle="tooltip" title="End Dialer">
        <i class="fa fa-times" />
      </button>
    </div>
    <!-- / POWER DIALLER -->
    
    <!-- CREATE -->
    <template if={ props.page.get('data.model') && props.dashup.page(props.page.get('data.model')) }>
      <button if={ props.dashup.can(props.page, 'submit') && !props.page.get('data.forms.1') } class="btn btn-primary mr-2" type="button" onclick={ (e) => props.onItem(e) }>
        <i class="fat fa-plus mr-2" />
        { props.dashup.page(props.page.get('data.model')).get('name') }
      </button>
      <div if={ props.dashup.can(props.page, 'submit') && props.page.get('data.forms.1') } class="btn-group dropdown mr-2">
        <button class="btn btn-primary dropdown-toggle" type="button" id="dropdown-add" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          <i class="fat fa-plus mr-2" />
          { props.dashup.page(props.page.get('data.model')).get('name') }
        </button>

        <div class="dropdown-menu" aria-labelledby="dropdown-add">
          <button each={ (form, i) in props.page.get('data.forms') } class="dropdown-item" onclick={ (e) => props.onItem(e, null, form) }>
            { props.dashup.page(form).get('name') }
          </button>
        </div>
      </div>
    </template>
    <!-- / CREATE -->

    <!-- DISPLAY -->
    <button class="btn btn-link text-dark" onclick={ (e) => onDisplay(e) } data-toggle="tooltip" title="Toggle View">
      <i class={ `fat fa-${props.page.get('user.display') === 'grid' ? 'columns' : 'th'}` } />
    </button>
    <!-- / DISPLAY -->
  </div>

  <script>
    // import phone
    import uuid from 'shortid';
    import Phone from '../../js/phone.ts';
  
    // export default
    export default class PagePhoneMenu {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////
      
      /**
       * on before mount
       */
      onBeforeMount() {
        // bind methods
        this.numbers = this.numbers.bind(this);

        // phone this
        Phone(this);

        // status
        this.status = {
          'busy'       : 'warning',
          'open'       : 'success',
          'ready'      : 'success',
          'closed'     : 'light',
          'offline'    : 'danger',
          'pending'    : 'info',
          'ringing'    : 'primary',
          'connecting' : 'info',
        };
        this.ucfirst = (str) => {
          // return
          return str.charAt(0).toUpperCase() + str.slice(1);
        };

        // check window
        if (typeof window === 'undefined') return;
      }

      /**
       * on mounted
       */
      onMounted () {
        // check window
        if (typeof window === 'undefined') return;
        
        // update interval
        this.updateInterval = setInterval(() => {
          // update
          if (this.connection && this.connection.call) this.update();
        }, 1000);

        // on numbers
        this.props.page.on('numbers', this.numbers);
        this.numbers();

        // tooltip
        $('[data-toggle="tooltip"]').tooltip();
      }

      /**
       * on mounted
       */
      onUpdated () {
        // check window
        if (typeof window === 'undefined') return;

        // tooltip
        $('[data-toggle="tooltip"]').tooltip();
      }

      /**
       * on mounted
       */
      onBeforeUnmount () {
        // check window
        if (typeof window === 'undefined') return;
        
        // update interval
        if (this.updateInterval) clearInterval(this.updateInterval);

        // on numbers
        this.props.page.removeListener('numbers', this.numbers);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // EVENT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on accept
       */
      onStart(e) {
        // update
        this.connection.call.answered = new Date();
        this.connection.conn.accept();
      }

      /**
       * on display
       */
      onDisplay(e) {
        // update
        this.props.user('display', this.props.page.get('user.display') === 'grid' ? 'list' : 'grid');
      }

      /**
       * on accept
       */
      onEnd(e) {
        // accept call
        this.connection.call.type === 'outbound' ? this.connection.conn.disconnect() : this.connection.conn.reject();
      }

      /**
       * on call
       */
      onMute(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // accept call
        this.connection.call.muted ? this.connection.conn.unmute() : this.connection.conn.mute();
      }

      /**
       * on number
       */
      onNumber(e, number) {
        // set in props
        this.phone.number(this.props, number.number);
      }

      /**
       * start dialer
       */
      onDialer(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set in props
        this.phone.dialer(this.props, uuid());
      }

      /**
       * next dialer
       */
      onNext(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // pause dialer
        this.phone.next(this.props);
      }

      /**
       * pause dialer
       */
      onPlay(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // pause dialer
        this.phone.play(this.props);
      }

      /**
       * pause dialer
       */
      onPause(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // pause dialer
        this.phone.pause(this.props);
      }

      /**
       * pause dialer
       */
      onFinish(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // pause dialer
        this.phone.finish(this.props);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * load numbers
       */
      async numbers() {
        // update numbers
        this.update({
          numbers : await this.props.page.action('list') || [],
        });

        // numbers
        if (this.state.numbers.length === 1) {
          // default
          this.phone.number(this.props, (this.state.numbers[0].number || {}).number);
        }
      }
    }
  </script>
</page-phone-menu>