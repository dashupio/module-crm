<page-phone-event>
  <div class={ `card card-sm card-task card-${getColor()}` } if={ props.event && props.event.get && types[getValue('type')] }>
    <div if={ getColor() } class="color-strip" />

    <div class="card-body d-flex align-items-center">
      <button class={ `btn btn-lg mr-3 btn-${types[getValue('type')].color}` }>
        <i class={ `${types[getValue('type')].icon}` } />
      </button>

      <img class="img-avatar rounded-circle mr-3" if={ dotProp.get(getValue('user'), '0.avatar.0.thumbs.sm-sq.url') } src={ dotProp.get(getValue('user'), '0.avatar.0.thumbs.sm-sq.url') } />

      <div>
        <b class="d-block">
          { dotProp.get(getValue('user'), '0.name') }
          { getValue('title') }
        </b>
        <p if={ getValue('body') } class="m-0">
          { getValue('body') }
        </p>
        <small>
          { moment(getValue('time')).format('Do MMM, h:mma') }
        </small>
        <small if={ getValue('duration') } class="ml-2">
          <b>
            { new Date(getValue('duration')).toISOString().substr(11, 8) }
          </b>
        </small>
        <div if={ hasTags() } class="tags mt-2">
          <template each={ (type, a) in getTagTypes() }>
            <button each={ (tag, i) in getTags(type) } class={ `btn btn-sm mr-1 btn-${tag.color}` }>
              { tag.label }
            </button>
          </template>
        </div>
      </div>
      
      <div if={ getValue('recording') && getValue('recording').length } class="ml-auto">
        <audio controls>
          <source src={ dotProp.get(getValue('recording'), '0.url') } type="audio/x-wav">
          Your browser does not support the audio element.
        </audio>
      </div>
    </div>
  </div>

  <script>
  
    // perfect
    import moment from 'moment';
    import dotProp from 'dot-prop';

    // export default
    export default class PagePhoneEvent {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // set states
        this.types = {
          'call:inbound' : {
            icon  : 'fa fa-phone',
            color : 'info',
          },
          'call:outbound' : {
            icon  : 'fa fa-phone-plus',
            color : 'success',
          },
          'sms:inbound' : {
            icon  : 'fa fa-comment',
            color : 'info',
          },
          'sms:outbound' : {
            icon  : 'fa fa-comment',
            color : 'success',
          },
          'note' : {
            icon  : 'fa fa-sticky-note',
            color : 'secondary',
          }
        };
        this.moment = moment;
        this.dotProp = dotProp;
      }

      /**
       * get value
       */
      getValue(name) {
        // check phone
        if (!this.props.phone) return;

        // fields
        this.fields = this.fields || this.props.phone.fields(this.props);

        // get value
        return this.props.event.get(this.props.phone.field(this.props, name, this.fields).name || this.props.phone.field(this.props, name, this.fields).uuid);
      }

      /**
       * get tags
       */
      getTags(tagField) {
        // tag field
        if (!tagField) return [];

        // get options
        const options = tagField.options || [];

        // check options
        if (!options.length) return [];

        // get value
        let val = this.props.event.get(tagField.name || tagField.uuid) || [];

        // set value
        if (typeof val === 'string') val = [val];

        // tags
        return options.filter((t) => {
          // return has tag
          return val.includes(t.value);
        });
      }

      /**
       * get types
       */
      getTagTypes() {
        // fields
        this.fields = this.fields || this.props.phone.fields(this.props);

        // set types
        let types = (this.props.page.get('data.event.status') || []);
        if (!Array.isArray(types)) types = [types];

        // return fields
        return types.map((type) => {
          // return type
          return (this.fields || []).find((f) => f.uuid === type);
        });
      }

      /**
       * get color
       */
      getColor() {
        // get color
        return this.getTags(this.getTagTypes()[0])[0] ? this.getTags(this.getTagTypes()[0])[0].color : null;
      }

      /**
       * has tags
       */
      hasTags() {
        // tag uuid
        return (this.props.page.get('data.event.status') || []).length;
      }
    }
  </script>
</page-phone-event>