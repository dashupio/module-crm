<page-phone-event>
  <div class={ `card card-sm card-task card-${getColor()}` } if={ props.event && props.event.get && types[getValue('type')] }>
    <div if={ getColor() } class="color-strip" />

    <div class="card-body d-flex align-items-center">
      <button class={ `btn btn-lg mr-3 btn-${types[getValue('type')].color}` }>
        <i class={ `${types[getValue('type')].icon}` } />
      </button>

      <img class="img-avatar rounded-circle mr-3" if={ dotProp.get(getValue('user'), '0.avatar.0.thumbs.sm-sq.url') } src={ dotProp.get(getValue('user'), '0.avatar.0.thumbs.sm-sq.url') } />

      <div>
        <b class="d-block">
          { dotProp.get(getValue('user'), '0.name') }
          { getValue('title') }
        </b>
        <editor-render if={ getValue('type') === 'email:outbound' || getValue('type') === 'email:inbound' } content={ getValue('body') } />
        <p if={ getValue('type') !== 'email:outbound' && getValue('type') !== 'email:inbound' && getValue('body') } class="m-0">
          { getValue('body') }
        </p>
        <small>
          { moment(getValue('time')).format('Do MMM, h:mma') }
        </small>
        <small if={ getValue('duration') } class="ml-2">
          <b>
            { new Date(getValue('duration')).toISOString().substr(11, 8) }
          </b>
        </small>
        <div if={ hasTags() } class="tags mt-2">
          <template each={ (type, a) in getTagTypes() }>
            <button each={ (tag, i) in getTags(type) } class={ `btn btn-sm mr-1 btn-${tag.color}` }>
              { tag.label }
            </button>
          </template>
        </div>
      </div>
      
      <div if={ getValue('recording') && getValue('recording').length } class="ml-auto d-flex flex-row">
        <div class="align-items-center mr-3">
          <div class="btn-group">
            <button class="btn btn-primary" onclick={ (e) => onTogglePlay(e) }>
              <i class={ `fa fa-${state.play ? 'pause' : 'play'}` } />
            </button>
            <a class="btn btn-primary" download={ `${props.event.get('_id')}` } target="_BLANK" href={ dotProp.get(getValue('recording'), '0.url') }>
              <i class="fa fa-download" />
            </a>
          </div>
        </div>
        <div class="wavesurfer" onclick={ (e) => onPlay(e) } />
      </div>
    </div>
  </div>

  <script>
  
    // perfect
    import moment from 'moment';
    import dotProp from 'dot-prop';
    import WaveSurfer from 'wavesurfer.js';

    // export default
    export default class PagePhoneEvent {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // set states
        this.types = {
          'call:inbound' : {
            icon  : 'fa fa-phone',
            color : 'info',
          },
          'call:outbound' : {
            icon  : 'fa fa-phone-plus',
            color : 'success',
          },
          'sms:inbound' : {
            icon  : 'fa fa-comment',
            color : 'info',
          },
          'sms:outbound' : {
            icon  : 'fa fa-comment',
            color : 'success',
          },
          'note' : {
            icon  : 'fa fa-sticky-note',
            color : 'secondary',
          },
          'email:outbound' : {
            icon  : 'fa fa-envelope',
            color : 'info',
          },
          'email:inbound' : {
            icon  : 'fa fa-envelope-open',
            color : 'info',
          }
        };
        this.moment = moment;
        this.dotProp = dotProp;
      }

      /**
       * on mounted
       */
      onMounted(props) {
        // build waveform
        this.buildWaveform();
      }

      /**
       * on mounted
       */
      onUpdated(props) {
        // build waveform
        this.buildWaveform();
      }

      /**
       * build waveform
       */
      buildWaveform() {
        // done
        if (!dotProp.get(this.getValue('recording'), '0.url') || this.wavesurfer) return;

        // create
        this.wavesurfer = WaveSurfer.create({
          height        : 40,
          barGap        : null,
          barWidth      : 2,
          container     : this.$('.wavesurfer'),
          waveColor     : '#2a60e4',
          progressColor : '#1cbe81'
        });
        this.wavesurfer.load(dotProp.get(this.getValue('recording'), '0.url').replace('storage.googleapis.com/', ''));
      }

      /**
       * on play
       */
      onPlay(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // play
        setTimeout(() => this.wavesurfer.play(), 100);
        this.update({
          play : true,
        });
      }

      /**
       * on toggle
       */
      onTogglePlay(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // play
        if (this.state.play) {
          this.wavesurfer.pause();
        } else {
          this.wavesurfer.play();
        }

        // update
        this.update({
          play : !this.state.play,
        });
      }

      /**
       * get value
       */
      getValue(name) {
        // check phone
        if (!this.props.phone) return;

        // fields
        this.fields = this.fields || this.props.phone.fields(this.props);

        // get value
        return this.props.event.get(this.props.phone.field(this.props, name, this.fields).name || this.props.phone.field(this.props, name, this.fields).uuid);
      }

      /**
       * get tags
       */
      getTags(tagField) {
        // tag field
        if (!tagField) return [];

        // get options
        const options = tagField.options || [];

        // check options
        if (!options.length) return [];

        // get value
        let val = this.props.event.get(tagField.name || tagField.uuid) || [];

        // set value
        if (typeof val === 'string') val = [val];

        // tags
        return options.filter((t) => {
          // return has tag
          return val.includes(t.value);
        });
      }

      /**
       * get types
       */
      getTagTypes() {
        // fields
        this.fields = this.fields || this.props.phone.fields(this.props);

        // set types
        let types = (this.props.page.get('data.event.status') || []);
        if (!Array.isArray(types)) types = [types];

        // return fields
        return types.map((type) => {
          // return type
          return (this.fields || []).find((f) => f.uuid === type);
        });
      }

      /**
       * get color
       */
      getColor() {
        // get color
        return this.getTags(this.getTagTypes()[0])[0] ? this.getTags(this.getTagTypes()[0])[0].color : null;
      }

      /**
       * has tags
       */
      hasTags() {
        // tag uuid
        return (this.props.page.get('data.event.status') || []).length;
      }
    }
  </script>

  <style>
    .wavesurfer {
      width  : 15rem;
      height : 2.5rem;
    }
  </style>
</page-phone-event>