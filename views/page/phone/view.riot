<page-phone-view>

  <div class="d-flex flex-column flex-1">
    <!-- CHECKS -->
    <a if={ !props.page.get('data.model') } href="#!" class="d-block alert alert-info mb-3" onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>model</b> for this page.
    </a>
    <a if={ !props.page.get('data.forms.0') } href="#!" class="d-block alert alert-info mb-3" onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select at least one <b>form</b> for this page.
    </a>
    <a if={ connection && !connection.number } href="#!" class="d-block alert alert-info mb-3" onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please buy or select a <b>number</b> for this page.
    </a>
    <!-- / CHECKS -->

    <!-- DASHBOARD -->
    <template if={ props.page.get('data.model') && props.page.get('data.forms.0') }>
      <dashup-view preview={ !props.altering } view="dashboard" type="page" struct="dashboard" blocks={ getBlocks() } on-select={ (item) => onSelect(item) } is-selected={ (item) => isSelected(item) } phone={ phone } connection={ connection } { ...getProps() } />
    </template>
    <!-- / DASHBOARD -->

    <!-- MODAL -->
    <div if={ state.modal } class="modal fade" data-backdrop="static">
      <div class="modal-dialog">
        <div class="modal-content">

          <!-- Modal Header -->
          <div class="modal-header">
            <h5 class="modal-title">
              Called <b>{ getValue(state.modal, 'name', null) }</b>
            </h5>
            <button type="button" class="btn-close" data-dismiss="modal">&times;</button>
          </div>

          <!-- Modal body -->
          <div class="modal-body">
            <div if={ getForm() } class="mb-3" if={ props.page.get('data.modal.0') }>
              <dashup-view ref={ ref('modal-item') } view="form" type="page" struct="form" item={ state.modal } preview={ true } page={ getForm() } { ...getProps(true) } />
            </div>
            <hr if={ getForm() } />
            <div class="mb-3">
              <label class="form-label">
                Note
              </label>
              <textarea class="form-control mb-3" type="text" ref="modal-note" />
            </div>
          </div>

          <!-- Modal footer -->
          <div class="modal-footer">
            <button type="button" class="btn btn-info mr-auto" data-dismiss="modal">
              Close
            </button>
            <button type="button" class={ `btn btn-success${loading('modal') ? ' disabled' : ''}` } onclick={ (e) => onSubmit(e) }>
              { loading('modal') ? 'Submitting...' : 'Next' }
            </button>
          </div>

        </div>
      </div>
    </div>
    <!-- / MODAL -->

  </div>

  <script>
    // perfect
    import moment from 'moment';
    import dotProp from 'dot-prop';
    import PerfectScrollbar from 'perfect-scrollbar';
    import { v4 as uuid } from 'uuid';

    // chat page task
    import Phone from '../../js/phone.ts';

    // export default
    export default class PagePhoneView {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * local components
       */
      static get components() {
        // return components
        return {
          
        };
      }

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // mixins
        Phone(this);

        // bind methods
        this.onSelect = this.onSelect.bind(this);
        this.loadModal = this.loadModal.bind(this);

        // safe update
        this.safeUpdate = () => {
          this.update();
        };

        // default blocks
        this.defaultBlocks = [
          {
            uuid  : uuid(),
            type  : 'card',
            _grid : {
              x : 6,
              y : 0,
              w : 3,
              h : 2,
            },
          },
          {
            uuid  : uuid(),
            type  : 'form',
            _grid : {
              x : 2,
              y : 0,
              w : 4,
              h : 6,
            },
          },
          {
            uuid  : uuid(),
            type  : 'events',
            _grid : {
              x : 6,
              y : 2,
              w : 6,
              h : 4,
            },
            background : true,
          },
          {
            uuid  : uuid(),
            type  : 'contact',
            _grid : {
              x : 9,
              y : 0,
              w : 3,
              h : 2,
            },
          },
          {
            uuid  : uuid(),
            type  : 'list',
            _grid : {
              x : 0,
              y : 0,
              w : 2,
              h : 6,
            },
            background : true,
          },
        ];

        // check page
        if (!this.props.page.get('data.blocks')) {
          // set
          this.props.page.set('data.blocks', this.defaultBlocks);
          this.props.data('blocks', this.defaultBlocks);
        }

        // on item
        this.phone.on('item', this.safeUpdate);
        this.phone.on('modal', this.loadModal);
      }

      /**
       * on before mount
       */
      onBeforeUnmount(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // on item
        this.phone.removeListener('item', this.safeUpdate);
        this.phone.removeListener('modal', this.loadModal);
      }

      /**
       * gets blocks
       */
      getBlocks() {
        // return blocks
        return this.props.blocks.filter((b) => (b.categories || []).includes('phone'));
      }

      /**
       * get end call form
       */
      getForm() {
        // get form
        const form = this.props.page.get('data.modal');

        // form
        if (!form) return null;

        // find form
        return this.props.dashup.page(form);
      }

      /**
       * get props
       */
      getProps(withoutPage) {
        // clone
        const newProps = { ...(this.props) };

        // delete
        delete newProps.type;
        delete newProps.item;
        delete newProps.view;
        delete newProps.class;
        delete newProps.blocks;
        delete newProps.struct;
        delete newProps.context;

        // delete page
        if (withoutPage) delete newProps.page;

        // set item
        newProps.item = this.connection && this.connection.item ? this.connection.item : null;

        // set context
        const context = { ...(this.props.context || {}) };

        // add to context
        context.item = newProps.item ? newProps.item.toJSON() : null;

        // model/forms
        newProps.phone = this.phone;
        newProps.model = this.props.page.get('data.model');
        newProps.forms = this.props.page.get('data.forms') || [];
        newProps.context = context;
        newProps.connection = this.connection;

        // return
        return newProps;
      }

      /**
       * on click
       */
      onSelect(item) {
        // on item
        if (this.isSelected(item)) return this.props.onItem(null, item);

        // do item
        this.phone.item(this.props, item);
      }

      /**
       * load modal
       */
      async loadModal() {
        // check item
        if (!this.connection.item) return;

        // log
        this.update({
          modal : null,
        });
        this.update({
          modal : this.connection.item,
        });

        // show modal
        $(this.$('.modal')).modal('show');
      }

      /**
       * on tag next
       */
      async onSubmit(e) {
        // get event
        const item = this.connection.item;
        const event = this.connection.event;

        // get data from each form
        const itemData = this.refs['modal-item'] && this.refs['modal-item'].data();

        // loading modal
        this.loading('modal', true);

        // submit form
        if (item && itemData) await this.props.dashup.action({
          type   : 'page',
          page   : this.props.page.get('data.forms')[0],
          form   : this.props.page.get('data.forms')[0],
          model  : this.props.page.get('data.model'),
          struct : 'form',
        }, 'form.submit', {
          ...itemData,
          _id : item.get('_id'),
        });
        
        // check modal notes
        const body = $(this.$('[ref="modal-note"]')).val();

        // check notes
        if (body && body.length) {
          // add event
          await this.phone.event(this.props, {
            body,
            type  : 'note',
            item  : this.connection.item,
            time  : new Date(),
            title : 'Added Note',
          });
        }

        // loading modal
        this.loading('modal', false);
        $(this.$('.modal')).modal('hide');

        // phone next
        this.loading('next', true);
        await this.phone.next(this.props);
        this.loading('next', false);
      }

      /**
       * is selected
       */
      isSelected(item) {
        // return selected
        return this.connection && this.connection.item && this.connection.item.get('_id') === item.get('_id');
      }

      /**
       * get value
       */
      getValue(item, name, tld) {
        // item
        if (!item) item = this.connection.item;

        // return field
        const field = this.phone.getFields(this.props).find((f) => f.uuid === this.props.page.get(`data.field.${name}`));

        // return value
        return dotProp.get(item.toJSON(), `${field.name || field.uuid}${tld ? `.${tld}` : ''}`);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * classes
       */
      classes(obj) {
        // return object
        return Object.keys(obj).filter((k) => obj[k]).join(' ');
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-phone-view>