<page-phone-tasks>
  <div>
    <div class="mb-3">
      <label class="form-label">
        Contact Model
      </label>
      <eden-select on-change={ (e, val) => onModel(val) } ref={ ref('model') } placeholder="Select Model" data={ getModel() } />
    </div>
    <div if={ !loading('model') && props.page.get('data.model') } class="mb-3">
      <label class="form-label">
        Contact Form(s)
      </label>
      <eden-select on-change={ (e, val) => onForms(val) } ref={ ref('forms') } placeholder="Select Form(s)" multiple={ true } data={ getForms() } />
    </div>
    <div if={ !loading('model') && !loading('form') && props.page.get('data.forms.0') } class="mb-3">
      <label class="form-label">
        End Call Form
      </label>
      <eden-select on-change={ (e, val) => onModal(val) } ref={ ref('modal') } placeholder="Select Modal Field" data={ getModal() } />
      <small>
        Form to display at the end of a call.
      </small>
    </div>

    <div if={ !loading('model') && !loading('form') && props.page.get('data.forms.0') }>
      <hr />
      
      <div class="mb-3" each={ (field, i) in fields }>
        <label class="form-label">
          { field.label } Field
        </label>
        <eden-select on-change={ (e, value) => onField(field.name, value) } ref={ ref(field.name) } placeholder={ `Select ${field.label}` } data={ getField(field.name, field.type) } />
      </div>
        
      <div class="mb-3">
        <label class="form-label">
          Tag Field(s)
        </label>
        <eden-select on-change={ (e, val) => onTags(val) } ref={ ref('tag') } placeholder="Select Tag Field" data={ getTags() } multiple={ true } />
        <small>
          Selecting a tag field will allow you to tag tasks.
        </small>
      </div>
        
      <div class="mb-3">
        <label class="form-label">
          User Field(s)
        </label>
        <eden-select on-change={ (e, val) => onUsers(val) } ref={ ref('user') } placeholder="Select User Field" data={ getUsers() } multiple={ true } />
        <small>
          Selecting a user field will allow you to assign tasks to that user.
        </small>
      </div>
    </div>

    <div if={ props.page.get('data.forms.0') }>
      <hr />
        
      <div class="mb-3">
        <label class="form-label">
          Filter By
        </label>

        <dashup-query fields={ props.context.fields } on-change={ (val) => onFilter(val) } value={ props.page.get('data.filter') ? JSON.parse(props.page.get('data.filter')) : [] } />
      </div>
    </div>

  </div>

  <script>
    // export default
    export default class PagePhoneContacts {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       */
      onBeforeMount() {
        // bind methods
        this.onModel = this.onModel.bind(this);

        // set fields
        this.fields = [
          {
            name  : 'name',
            type  : 'text',
            label : 'Name'
          },
          {
            name  : 'email',
            type  : 'email',
            label : 'Email'
          },
          {
            name  : 'phone',
            type  : 'phone',
            label : 'Phone',
          }
        ];
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // EVENT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      onTab(e, tab) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();
        
        // update tab
        this.update({
          tab,
        });
      }

      /**
       * on model
       */
      async onModel(val) {
        // get value
        if (!val) val = this.refs.model.val();

        // model
        if (!val || !val.length) return;

        // loading model
        this.loading('model', true);
        
        // set model
        await this.props.data('model', val);

        // loading model
        this.loading('model', false);
      }

      /**
       * on model
       */
      async onForms(val) {
        // get value
        if (!val) val = this.refs.form.val();

        // model
        if (!val || !val.length) return;

        // loading model
        this.loading('forms', true);
        
        // set model
        await this.props.data('forms', val);

        // loading model
        this.loading('forms', false);
      }

      /**
       * on model
       */
      async onField(type, val) {
        // get value
        if (!val) val = this.refs[type].val();

        // model
        if (!val || !val.length) return;

        // field
        const data = this.props.page.get('data.field') || {};

        // set data
        data[type] = val;
        
        // set model
        this.props.data('field', data);
      }

      /**
       * on model
       */
      onTags(id) {
        // get value
        if (!id) id = this.refs.tag.val();

        // model
        if (!id || !id.length) return;
        
        // set model
        this.props.data('tag', id);
      }

      /**
       * on model
       */
      onUsers(id) {
        // get value
        if (!id) id = this.refs.user.val();

        // model
        if (!id || !id.length) return;
        
        // set model
        this.props.data('user', id);
      }

      /**
       * on model
       */
      onModal(val) {
        // set model
        this.props.data('modal', val);
      }

      /**
       * on view
       */
      onView(value) {
        // set color
        this.props.data('view', value, true);
      }

      /**
       * on model
       */
      onFilter(val) {
        // set model
        this.props.data('filter', JSON.stringify(val));
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // GET METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * get value
       */
      getModel() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'model';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.page.get('data.model') === page.get('_id'),
          };
        });
      }

      /**
       * get value
       */
      getForms() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'form' && page.get('data.model') === this.props.page.get('data.model');
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : (this.props.page.get('data.forms') || []).includes(page.get('_id')),
          };
        });
      }

      /**
       * get field
       */
      getField(name, type) {
        // return value
        return [...(this.props.context.fields)].filter((f) => {
          // return type
          return type.includes(f.type);
        }).map((field) => {
          // return fields
          return {
            name     : field.label || field.name,
            value    : field.uuid,
            selected : this.props.page.get(`data.field.${name}`) === field.uuid,
          };
        });
      }

      /**
       * get field
       */
      getModal() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'form' && page.get('data.model') === this.props.page.get('data.model');
        }).map((page) => {
          // return fields
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.page.get('data.modal') === page.get('_id'),
          };
        });
      }

      /**
       * get field
       */
      getTags() {
        // return value
        return [...(this.props.context.fields)].filter((field) => ['select', 'checkbox'].includes(field.type)).map((field) => {
          // return fields
          return {
            name     : field.label || field.name,
            value    : field.uuid,
            selected : (this.props.page.get('data.tag') || []).includes(field.uuid),
          };
        });
      }

      /**
       * get field
       */
      getUsers() {
        // return value
        return [...(this.props.context.fields)].filter((field) => ['user'].includes(field.type)).map((field) => {
          // return fields
          return {
            name     : field.label || field.name,
            value    : field.uuid,
            selected : (this.props.page.get('data.user') || []).includes(field.uuid),
          };
        });
      }

      /**
       * get props
       */
      getProps(obj) {
        // return get props
        return Object.keys(obj).reduce((accum, key) => {
          // set accum
          if (obj[key]) accum[key] = true;

          // return accum
          return accum;
        }, {});
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-phone-tasks>